// Generated by gencpp from file lstm_motion_model/PredictStateResponse.msg
// DO NOT EDIT!


#ifndef LSTM_MOTION_MODEL_MESSAGE_PREDICTSTATERESPONSE_H
#define LSTM_MOTION_MODEL_MESSAGE_PREDICTSTATERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lstm_motion_model/State.h>

namespace lstm_motion_model
{
template <class ContainerAllocator>
struct PredictStateResponse_
{
  typedef PredictStateResponse_<ContainerAllocator> Type;

  PredictStateResponse_()
    : predicted_states()  {
    }
  PredictStateResponse_(const ContainerAllocator& _alloc)
    : predicted_states(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::lstm_motion_model::State_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::lstm_motion_model::State_<ContainerAllocator> >::other >  _predicted_states_type;
  _predicted_states_type predicted_states;





  typedef boost::shared_ptr< ::lstm_motion_model::PredictStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lstm_motion_model::PredictStateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PredictStateResponse_

typedef ::lstm_motion_model::PredictStateResponse_<std::allocator<void> > PredictStateResponse;

typedef boost::shared_ptr< ::lstm_motion_model::PredictStateResponse > PredictStateResponsePtr;
typedef boost::shared_ptr< ::lstm_motion_model::PredictStateResponse const> PredictStateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lstm_motion_model::PredictStateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lstm_motion_model::PredictStateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lstm_motion_model

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'lstm_motion_model': ['/home/sean/PycharmProjects/human-motion-rnn/lstm_motion_model/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lstm_motion_model::PredictStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lstm_motion_model::PredictStateResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lstm_motion_model::PredictStateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lstm_motion_model::PredictStateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lstm_motion_model::PredictStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lstm_motion_model::PredictStateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lstm_motion_model::PredictStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c9c8326674c06e54fc1202b2ccc1deb";
  }

  static const char* value(const ::lstm_motion_model::PredictStateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c9c8326674c06e5ULL;
  static const uint64_t static_value2 = 0x4fc1202b2ccc1debULL;
};

template<class ContainerAllocator>
struct DataType< ::lstm_motion_model::PredictStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lstm_motion_model/PredictStateResponse";
  }

  static const char* value(const ::lstm_motion_model::PredictStateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lstm_motion_model::PredictStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "State[] predicted_states\n"
"\n"
"================================================================================\n"
"MSG: lstm_motion_model/State\n"
"uint64 id\n"
"float32[] state\n"
;
  }

  static const char* value(const ::lstm_motion_model::PredictStateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lstm_motion_model::PredictStateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.predicted_states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredictStateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lstm_motion_model::PredictStateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lstm_motion_model::PredictStateResponse_<ContainerAllocator>& v)
  {
    s << indent << "predicted_states[]" << std::endl;
    for (size_t i = 0; i < v.predicted_states.size(); ++i)
    {
      s << indent << "  predicted_states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lstm_motion_model::State_<ContainerAllocator> >::stream(s, indent + "    ", v.predicted_states[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LSTM_MOTION_MODEL_MESSAGE_PREDICTSTATERESPONSE_H
