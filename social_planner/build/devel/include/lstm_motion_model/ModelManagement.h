// Generated by gencpp from file lstm_motion_model/ModelManagement.msg
// DO NOT EDIT!


#ifndef LSTM_MOTION_MODEL_MESSAGE_MODELMANAGEMENT_H
#define LSTM_MOTION_MODEL_MESSAGE_MODELMANAGEMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lstm_motion_model
{
template <class ContainerAllocator>
struct ModelManagement_
{
  typedef ModelManagement_<ContainerAllocator> Type;

  ModelManagement_()
    : id(0)
    , action(0)  {
    }
  ModelManagement_(const ContainerAllocator& _alloc)
    : id(0)
    , action(0)  {
  (void)_alloc;
    }



   typedef uint64_t _id_type;
  _id_type id;

   typedef uint16_t _action_type;
  _action_type action;



  enum {
    NEW = 0u,
    COPY = 1u,
    DELETE = 2u,
  };


  typedef boost::shared_ptr< ::lstm_motion_model::ModelManagement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lstm_motion_model::ModelManagement_<ContainerAllocator> const> ConstPtr;

}; // struct ModelManagement_

typedef ::lstm_motion_model::ModelManagement_<std::allocator<void> > ModelManagement;

typedef boost::shared_ptr< ::lstm_motion_model::ModelManagement > ModelManagementPtr;
typedef boost::shared_ptr< ::lstm_motion_model::ModelManagement const> ModelManagementConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lstm_motion_model::ModelManagement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lstm_motion_model::ModelManagement_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lstm_motion_model

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'lstm_motion_model': ['/home/sean/PycharmProjects/human-motion-rnn/lstm_motion_model/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lstm_motion_model::ModelManagement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lstm_motion_model::ModelManagement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lstm_motion_model::ModelManagement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lstm_motion_model::ModelManagement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lstm_motion_model::ModelManagement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lstm_motion_model::ModelManagement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lstm_motion_model::ModelManagement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "77c26195935ca59ed4ca7d03b9e7c474";
  }

  static const char* value(const ::lstm_motion_model::ModelManagement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x77c26195935ca59eULL;
  static const uint64_t static_value2 = 0xd4ca7d03b9e7c474ULL;
};

template<class ContainerAllocator>
struct DataType< ::lstm_motion_model::ModelManagement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lstm_motion_model/ModelManagement";
  }

  static const char* value(const ::lstm_motion_model::ModelManagement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lstm_motion_model::ModelManagement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 id\n"
"uint16 action\n"
"uint16 NEW=0\n"
"uint16 COPY=1\n"
"uint16 DELETE=2\n"
;
  }

  static const char* value(const ::lstm_motion_model::ModelManagement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lstm_motion_model::ModelManagement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModelManagement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lstm_motion_model::ModelManagement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lstm_motion_model::ModelManagement_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.id);
    s << indent << "action: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LSTM_MOTION_MODEL_MESSAGE_MODELMANAGEMENT_H
