# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lstm_motion_model/ManageModelsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lstm_motion_model.msg

class ManageModelsRequest(genpy.Message):
  _md5sum = "cb85bd4cb0b6b722cfbf8f8d20812d23"
  _type = "lstm_motion_model/ManageModelsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ModelManagement[] management_requests

================================================================================
MSG: lstm_motion_model/ModelManagement
uint64 id
uint16 action
uint16 NEW=0
uint16 COPY=1
uint16 DELETE=2"""
  __slots__ = ['management_requests']
  _slot_types = ['lstm_motion_model/ModelManagement[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       management_requests

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ManageModelsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.management_requests is None:
        self.management_requests = []
    else:
      self.management_requests = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.management_requests)
      buff.write(_struct_I.pack(length))
      for val1 in self.management_requests:
        _x = val1
        buff.write(_get_struct_QH().pack(_x.id, _x.action))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.management_requests is None:
        self.management_requests = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.management_requests = []
      for i in range(0, length):
        val1 = lstm_motion_model.msg.ModelManagement()
        _x = val1
        start = end
        end += 10
        (_x.id, _x.action,) = _get_struct_QH().unpack(str[start:end])
        self.management_requests.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.management_requests)
      buff.write(_struct_I.pack(length))
      for val1 in self.management_requests:
        _x = val1
        buff.write(_get_struct_QH().pack(_x.id, _x.action))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.management_requests is None:
        self.management_requests = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.management_requests = []
      for i in range(0, length):
        val1 = lstm_motion_model.msg.ModelManagement()
        _x = val1
        start = end
        end += 10
        (_x.id, _x.action,) = _get_struct_QH().unpack(str[start:end])
        self.management_requests.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_QH = None
def _get_struct_QH():
    global _struct_QH
    if _struct_QH is None:
        _struct_QH = struct.Struct("<QH")
    return _struct_QH
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lstm_motion_model/ManageModelsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lstm_motion_model.msg

class ManageModelsResponse(genpy.Message):
  _md5sum = "9572533ca7487132f8ea8db2279ad42b"
  _type = "lstm_motion_model/ManageModelsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ModelManagement[] management_responses


================================================================================
MSG: lstm_motion_model/ModelManagement
uint64 id
uint16 action
uint16 NEW=0
uint16 COPY=1
uint16 DELETE=2"""
  __slots__ = ['management_responses']
  _slot_types = ['lstm_motion_model/ModelManagement[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       management_responses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ManageModelsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.management_responses is None:
        self.management_responses = []
    else:
      self.management_responses = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.management_responses)
      buff.write(_struct_I.pack(length))
      for val1 in self.management_responses:
        _x = val1
        buff.write(_get_struct_QH().pack(_x.id, _x.action))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.management_responses is None:
        self.management_responses = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.management_responses = []
      for i in range(0, length):
        val1 = lstm_motion_model.msg.ModelManagement()
        _x = val1
        start = end
        end += 10
        (_x.id, _x.action,) = _get_struct_QH().unpack(str[start:end])
        self.management_responses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.management_responses)
      buff.write(_struct_I.pack(length))
      for val1 in self.management_responses:
        _x = val1
        buff.write(_get_struct_QH().pack(_x.id, _x.action))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.management_responses is None:
        self.management_responses = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.management_responses = []
      for i in range(0, length):
        val1 = lstm_motion_model.msg.ModelManagement()
        _x = val1
        start = end
        end += 10
        (_x.id, _x.action,) = _get_struct_QH().unpack(str[start:end])
        self.management_responses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_QH = None
def _get_struct_QH():
    global _struct_QH
    if _struct_QH is None:
        _struct_QH = struct.Struct("<QH")
    return _struct_QH
class ManageModels(object):
  _type          = 'lstm_motion_model/ManageModels'
  _md5sum = 'bdd8f71f894accd0c4b5f9c68c657241'
  _request_class  = ManageModelsRequest
  _response_class = ManageModelsResponse
