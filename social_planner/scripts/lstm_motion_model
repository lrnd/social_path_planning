#!/usr/bin/env python

import rospy
import torch
from torch import autograd
from lstm_motion_model import models

class LstmMotionModel:
    def __init__(self):
        self.model = models.SimpleMotionModel(
            input_size=2,
            hidden_size=16,
            num_lstm_layers=3,
            output_size=2)

        self.model_states_dict = {}
        self.next_id = 1
        self.retired_ids = []

        self.use_cuda = torch.cuda.is_available()

        # Load the model into the GPU
        # TODO: Fix device managment here, dont use .cuda()
        if self.use_cuda:
            print('Using CUDA')
            self.model.cuda()
            self.tensor_type = torch.cuda.FloatTensor
        else:
            print('NOT using CUDA')
            self.tensor_type = torch.FloatTensor

        rospy.init_node('lstm_motion_model')
        model_filename = rospy.get_param('~model_file')

        print('Loading model weights from', model_filename)
        self.model.load_state_dict(torch.load(model_filename))

    def predict(self, id, input):
        if id not in self.model_states_dict:
            return None

        input_tensor = autograd.Variable(self.tensor_type(input))


        self.model.state = self.model_states_dict[id]
        output_tensor = self.model(input_tensor)
        self.model_states_dict = self.model.state
        return output_tensor.data.cpu().tolist()


if __name__ == '__main__':
    lmm = LstmMotionModel
    rospy.spin()
